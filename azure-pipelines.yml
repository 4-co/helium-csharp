# Docker
# Build and push images to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# run on all branches
# ignore documentation updates
trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - src/*

resources:
- repo: self

variables:
  # Container registry service connection
  # This has to be setup in advance
  # You can change this name to use an existing ACR service connection
  dockerRegistryServiceConnection: 'helium-acr'

  appRepository: 'helium-csharp'
  appDockerFile: '$(Build.SourcesDirectory)/Dockerfile'

  integrationTestRepository: 'helium-integration-test'
  integrationTestDockerFile: '$(Build.SourcesDirectory)/Dockerfile-Integration-Test'

  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

# Unit Test job runs on each check in
# Publish ACR jobs only runs on master branch

stages:
- stage: Build
  displayName: Build and push containers
  jobs:
  - job: Build
    displayName: Build and test app

    pool:
      vmImage: $(vmImageName)

    steps:
    - script: |
         docker build -t helium --target build .
         docker create --name helium helium
         docker cp helium:./src/unit-tests/TestResults .
         docker rm helium

      displayName: Run unit tests

    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
        failTaskOnFailedTests: true

    - task: Docker@2
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      displayName: Build and push app to container registry
      inputs:
        command: buildAndPush
        repository: $(appRepository)
        dockerfile: $(appDockerFile)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: Docker@2
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      displayName: Build and push integration-test to container registry
      inputs:
        command: buildAndPush
        repository: $(integrationTestRepository)
        dockerfile: $(integrationTestDockerFile)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
