name: Docker Image Build

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

    paths-ignore:
      - 'docs/**'
      - '.github/**'
      - '**.md'
      - '.github/**/open-*.yml'

    tags:
      - v*

jobs:

  build:

    runs-on: ubuntu-latest
    env:
      # copy the secrets to env vars for if: conditions

      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PAT: ${{ secrets.DOCKER_PAT }}

      TENANT: ${{ secrets.TENANT }}
      SERVICE_PRINCIPAL: ${{ secrets.SERVICE_PRINCIPAL }}
      SERVICE_PRINCIPAL_SECRET: ${{ secrets.SERVICE_PRINCIPAL_SECRET }}

      KEYVAULT_NAME: ${{ secrets.KEYVAULT_NAME }}
      AUTH_TYPE: CLI

    steps:
    - uses: actions/checkout@v2

    - id: "step1"
      name: Docker Pull
      run: |
        # Pull the latest images
        # This doesn't have to be a separate step, but makes the output easier to read and debug
        docker pull mcr.microsoft.com/dotnet/core/sdk:3.1
        docker pull mcr.microsoft.com/dotnet/core/aspnet:3.1-alpine
        docker pull retaildevcrew/webvalidate:beta
    
    - id: "step2"
      name: Validate Azure Access
      if: ${{ env.SERVICE_PRINCIPAL_SECRET != '' && env.TENANT != '' && env.SERVICE_PRINCIPAL != '' && env.KEYVAULT_NAME != '' }}
      run: |
        # login to Azure
        az login --service-principal -u ${SERVICE_PRINCIPAL} --tenant ${TENANT} -p ${SERVICE_PRINCIPAL_SECRET}

        # verify SP has access to Key Vault
        az keyvault secret show --name CosmosDatabase --vault-name $KEYVAULT_NAME
        
    - id: "step3"
      name: Docker Build Test
      if: ${{ env.SERVICE_PRINCIPAL_SECRET != '' && env.TENANT != '' && env.SERVICE_PRINCIPAL != '' && env.KEYVAULT_NAME != '' }}
      run: |
        # build test image
        docker build . -t test --target test

    - id: "step4"
      name: Run Test Container
      if: ${{ success() && env.KEYVAULT_NAME != '' }}
      run: |
        # create network
        docker network create helium
    
        # run the app
        echo "Running the test image"
        docker run -d --name hcs -p 4120:4120 --env KEYVAULT_NAME=$KEYVAULT_NAME --env AUTH_TYPE=$AUTH_TYPE --network helium -v ~/.azure:/root/.azure test
        docker logs hcs --tail 30

        echo "Waiting for web server to start ..."
        sleep 25
        
    - id: "step5"
      name: Run WebValidate
      if: ${{ success() }}
      run: |
        # run web validation test
        echo "Running the WebValidate Container"
        docker run --network helium --name webv retaildevcrew/webvalidate:beta -s http://hcs:4120 -f baseline.json bad.json
        docker logs webv --tail 30
        echo "Waiting for web server to shutdown ..."
        sleep 15
        
        echo "WebValidate complete"

    - id: "step6"
      name: Display coverage results
      if: ${{ success() }}
      run: |
        # display the results
        docker logs hcs | tail -n 24

    - id: "step7"
      name: Display Web Validate results
      if: ${{ success() }}
      run: |
        # display the results
        docker logs webv

    - id: "step8"
      name: Display full test results
      if: ${{ success() }}
      run: |
        # display the results
        docker logs hcs

    - id: "step9"
      name: Docker Build, Tag and Push
      if: ${{ env.DOCKER_PAT != '' && env.DOCKER_REPO != '' && env.DOCKER_USER != '' && success() }}
      run: |
        # login to dockerhub
        echo "${DOCKER_PAT}" | docker login -u ${DOCKER_USER} --password-stdin
        
        echo "Logged in to DockerHub"

        # build release image
        docker build . -t $DOCKER_REPO:beta

        # Tag image based on repo tag if a github label
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]
        then

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        
          # Strip "v" prefix from tag name
          VERSION=$(echo $VERSION | sed -e 's/^v//')
          
          echo $VERSION

          # tag the image with :version and :stable
          docker tag $DOCKER_REPO:beta $DOCKER_REPO:$VERSION
          docker tag $DOCKER_REPO:beta $DOCKER_REPO:stable
        fi

        # Push to the repo
        docker push $DOCKER_REPO
    
    - id: "step10"
      name: ACR Build, Tag and Push
      if: ${{ env.ACR_REG != '' && env.ACR_REPO != '' && env.SERVICE_PRINCIPAL != '' }}
      run: |
        # login to acr
        az acr login -n ${ACR_REG}
        
        echo "Logged in to ACR"
        
        # build release image
        docker build . -t $ACR_REPO:beta

        # Tag image based on repo tag if a github label
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]
        then

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        
          # Strip "v" prefix from tag name
          VERSION=$(echo $VERSION | sed -e 's/^v//')
          
          echo $VERSION

          # tag the image with :version and :stable
          docker tag $ACR_REPO:beta $ACR_REPO:$VERSION
          docker tag $ACR_REPO:beta $ACR_REPO:stable
          
          # Show the ACR repository informaion to confirm SHA
          echo "${ACR_IMAGE}:${VERSION} info:"
          az acr repository show -n ${ACR_REG} --image ${ACR_IMAGE}:${VERSION} -o table
          echo "${ACR_IMAGE}:stable info:"
          az acr repository show -n ${ACR_REG} --image ${ACR_IMAGE}:stable -o table
          echo "${ACR_IMAGE}:beta info:"
          az acr repository show -n ${ACR_REG} --image ${ACR_IMAGE}:beta -o table
        else
          echo "${ACR_IMAGE}:beta info:"
          az acr repository show -n ${ACR_REG} --image ${ACR_IMAGE}:beta -o table
        fi